@model aspNETfirstProject.ViewModels.ItemsViewModel

@{
    // Create button text "Create New Device" or "Create New Phone", etc
    string type = Model.ItemType.ToString();
    string LinkText = "Create New " + type.Substring(0, 1).ToUpper() + type.Substring(1).ToLower();
}

<h2>@Model.Title</h2>

@* IF user is logged in, show create POST button*@
@if (Model.UserAuthorized)
{
    <p>
        @Html.ActionLink(LinkText, "Create", "Items", new { ItemType = Model.ItemType },
            new { @class = "btn btn-success btn-lg active" })
    </p>
} else
{
    <p>Log in to Create a Post.</p>
}

@if (Model.Items.Count == 0) {
    <h2>No @Model.ItemType Found.</h2>
    }
<div class="row">
    @foreach (var item in Model.Items) {
    
        <div class="col-md-3" style="background-color: lightblue">
            <div>
                <span id="@(Model.ItemType + item.ID)"> Title: @item.Title</span>
            </div>
            <div>
                Description: <span class="description">@item.Description</span>
            </div>
            <div>
                @if (item.DocumentPath != null)
                {
                    <a class="btn btn-primary" href="~/Documents/@(item.DocumentPath)"
                       role="button">
                        <span class="glyphicon glyphicon-file" aria-hidden="true"></span>
                        @item.DocumentPath.Substring(15)
                    </a>
                }
            </div>    
            <div>
                @if (item.ImagePath != null)
                {
                    <img src="~/Images/@(item.ImagePath)" alt="pic" class="img-rounded">
                    <br /><br />
                }
            </div>
            <div>
                Author: @item.ApplicationUser.UserName
                @if (item.ApplicationUser.ImageUrl == null)
                {
                    <img src="~/Images/Gravatars/pinkKitty.jpg" alt="gravatar"
                         height="35" width="35" class="img-circle">
                }
                else
                {
                    <img src="~/Images/Gravatars/@(item.ApplicationUser.ImageUrl)" alt="gravatar"
                         height="35" width="35" class="img-circle">
                }
            </div>

            <div>
                Updated: @Html.DisplayFor(modelItem => item.Updated_at)
                Type: @Html.DisplayFor(modelItem => item.ItemType)
            </div>   
            <div>
                @if (Model.UserAuthorized)
                {
                    if (Model.UserId == item.UserID || Model.UserAdmin)
                    {
                        @Html.ActionLink("Edit", "Edit", new { id = item.ID }) <span>|</span>
                        @Html.ActionLink("Delete", "Delete", new { id = item.ID })
                    }
                }
            </div>
            <div>
                @if (Model.UserAuthorized)
                {
                    <a href="#0" class="btn btn-success" onclick="show_add_comment_form(@(item.ID))">
                        Add a Comment <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
                    </a>

                    <!-- hidden "add comment form" -->
                    <div id="hiddenAddComment@(item.ID)" style="display: none">
                        <textarea id="newComment@(item.ID)" rows="4"style="width:100%"></textarea>
                        <button onclick="add_comment(@item.ID)" >Submit</button>
                    </div>

                } <!-- End hidden links if user logged in -->
                <button  onclick="show_comments(@item.ID)" class="btn-into">Show Comments</button>
              
                <div id="HiddenComments@(item.ID)"></div>
            </div>   
            
            
        </div>        
    }
    
</div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "__AjaxAntiForgeryForm" }))
{
    @Html.AntiForgeryToken()
}


<script type="text/javascript">

    function show_add_comment_form($id) {
        $("#hiddenAddComment" + $id).toggle("slow");
        $("#addCommentLink" + $id).hide("slow");
    }

    function add_comment(id) {
        var form = $('#__AjaxAntiForgeryForm');
        var token = $('input[name="__RequestVerificationToken"]', form).val();
        $.ajax({
            method: "POST",
            url: "/Comments/Add_Comment",
            data: { 
                ItemID: id,
                Description: $('#newComment' + id).val(),
                __RequestVerificationToken: token
            },
            success: function (data) {
                if(data === "Ok"){
                    show_comments(id);
                    $("#hiddenAddComment" + id).hide();
                } else{
                    alert(data);
                }
            },
            error: function(){
                alert('failure at add Comments');
            }
        });

    }

    function show_comments(id) {
        var form = $('#__AjaxAntiForgeryForm');
        var token = $('input[name="__RequestVerificationToken"]', form).val();
       $.ajax({
                method: "POST",
			url: "/Comments/ShowComments",
			data: {ItemID:id, __RequestVerificationToken: token,   
			},
			dataType: "html",   
			success: function (data) {
			    $("#HiddenComments" + id).html(data);
			   // $("#HiddenComments" + id).show();
                },
			error: function(){
                    alert('failure at Comments');
                }
            });
	}

		function delete_comment(CommentId, ItemId) {
			var form = $('#__AjaxAntiForgeryForm');
			var token = $('input[name="__RequestVerificationToken"]', form).val();
			$.ajax({
				method: "POST",
				url: "/Comments/DeleteComment",
				data: {__RequestVerificationToken: token,   
				    Id: CommentId
				}, 
				dataType: "html",  
				success: function (data) {
				    show_comments(ItemId); 
				    //$( "#HiddenComments" + ItemId).hide("slow");
				},
				error: function(){
					alert('failure at delete Comments');
				}
			});

		}
</script>